#!/usr/bin/env perl

# Copyright (c) 2017 Todd Freed <todd.freed@gmail.com>
# 
# This file is part of autominer.
# 
# autominer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# autominer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License

use strict;
use warnings;

use File::Basename;
use Cwd;
our $repodir;
BEGIN { $repodir = dirname(Cwd::realpath("$0/..")) }
use lib "$repodir/lib";
use util;
use release;
override_warn_and_die();

use Time::Piece;
use Data::Dumper;
use JSON::XS;
use POSIX ':sys_wait_h';
use config;
use miner;
use perf;
use xlinux;

our $verbose = 0;
our %opts = (
    'period'        => 60 * 1         # one minute
  , 'window'        => 'm5'           # the trailing 5 minute average
  , 'retention'     => 10 * 24 * 30   # one month
  , 'samples'       => 60 * 10        # ten minutes
  , 'profile'       => 'default'
  , 'worker'        => ''

  # miner executables expected to be in $PATH by default
  , 'ccminer_path'              => 'ccminer'
  , 'ccminer_cryptonight_path'  => 'ccminer-cryptonight'
  , 'ethminer_path'             => 'ethminer'
  , 'nheqminer_cuda_path'       => 'nheqminer_cuda'
  , 'sgminer_path'              => 'sgminer'
);
my %optargs = (
    'help|h'            => \$opts{help}
  , 'version|V'         => \$opts{version}
  , 'verbose|v'         => \$opts{verbose}

  , 'data-dir=s'        => \$opts{datadir}
  , 'profile=s'         => \$opts{profile}
  , 'payout-address=s'  => \$opts{payout_address}
  , 'worker=s'          => \$opts{worker}
  , 'period=i'          => \$opts{period}
  , 'cards=s'           => \$opts{cards}
  , 'retention=i'       => \$opts{retention}    # benchmark files to retain
  , 'samples=i'         => \$opts{samples}      # samples to use in speed calculation
  , 'window=s'          => \$opts{window}

  , 'nicehash-usa'      => \$opts{"nicehash-usa"}
  , 'nicehash-eu'       => \$opts{"nicehash-eu"}

  , 'ccminer-path=s'              => \$opts{ccminer_path}
  , 'ccminer-cryptonight-path=s'  => \$opts{ccminer_cryptonight_path}
  , 'ethminer-path=s'             => \$opts{ethminer_path}
  , 'nheqminer-cuda-path=s'       => \$opts{nheqminer_cuda_path}
  , 'sgminer-path=s'              => \$opts{sgminer_path}
);
configure(\%optargs, \%opts);

if($opts{help})
{
  print <<HELP;
autominer - an autoswitching miner for linux, version $release::number

 >> BTC donations : 184AtMD3AihYke2bKQD9AXh4Dgzvtr7jhA (hossbeast)

usage: autominer mine [options]

 --help                    print this help text
 --version                 print the version number, exit
 --verbose                 print commands as they are run
 --quiet                   dont echo output from the miner to stdout

required
 --payout-address <addr>   where to send mining rewards - part of the username mining parameter
 --cards <device-ids>      comma-separated list of devices ids to mine with
 --data-dir <path>         base location for perf, history and market data

required - at least one
 --nicehash-usa            consider mining on algos in nicehash.usa
 --nicehash-eu             consider mining on algos in nicehash.eu

optional
 --profile <name>          separate config file, perf and history data
 --worker <name>           name of this mining rig / worker - part of the username mining parameter
 --period <seconds>        how frequently to re-evaluate what to mine
 --retention <number>      number of per-period sessions to retain
 --samples <seconds>       number of trailing perf samples to estimate future performance from

optional - miner executables
 --ccminer-path <path>              path to the ccminer executable
 --ccminer-cryptonight-path <path>  path to the ccminer-cryptonight executable
 --ethminer-path <path>             path to the ethminer executable
 --nheqminer-cuda-path <path>       path to the nheqminer_cuda executable
 --sgminer-path <path>              path to the sgminer executable

For more information visit https://github.com/hossbeast/autominer
HELP
  exit 0
}
if($opts{version})
{
  print "autominer-$release::number\n";
  exit 0;
}

die "missing required config --payout-address" unless $opts{payout_address};
die "missing required config --data-dir" unless $opts{datadir};
die "missing required config --cards" unless defined $opts{"comma-cards"};
die "missing required config --nicehash-usa or --nicehash-eu" unless $opts{"nicehash-usa"} or $opts{"nicehash-eu"};

if($verbose)
{
  printf("parameters\n");
  printf("%20s %s\n", "profile", $opts{profile});
  printf("%20s %s\n", "data-dir", $opts{datadir});
  printf("%20s %s\n", "payout-address", $opts{payout_address});
  printf("%20s %s\n", "worker", $opts{worker});
  printf("%20s %s\n", "cards", $opts{"comma-cards"});
  printf("%20s %s\n", "evaluation period", $opts{period});
  printf("%20s %s\n", "samples", $opts{samples});
  printf("%20s %s\n", "window", $opts{window});
  printf("%20s %s\n", "retention", $opts{retention});
  printf("%20s %s\n", "nicehash-usa", $opts{"nicehash-usa"} ? "yes" : "no");
  printf("%20s %s\n", "nicehash-eu", $opts{"nicehash-eu"} ? "yes" : "no");
}

$SIG{CHLD} = 'IGNORE';

# ensure directories exist
mkdirp("$opts{datadir}");
mkdirp("$opts{datadir}/bench");
mkdirp("$opts{datadir}/bench/$opts{profile}");
mkdirp("$opts{datadir}/history");
mkdirp("$opts{datadir}/history/$opts{profile}");
mkdirp("/tmp/run");
mkdirp("/tmp/run/autominer");
mkdirp("/tmp/run/autominer/aggregator");

# load miners
my $benchdir = "$opts{datadir}/bench/$opts{profile}";
my %miners = enumerate_miners("$repodir/miners");
die "no miners" unless %miners;

for my $miner (values %miners)
{
  # load supported algorithms
  enumerate_algos($miner);

  mkdirp("$opts{datadir}/bench/$opts{profile}/$$miner{name}");

  # load perf data per algo
  for my $algo (values %{$$miner{algos}})
  {
    perf_initialize($miner, $algo, $benchdir);
  }
}

# initialize history files
my $history_dir = "$opts{datadir}/history/$opts{profile}";
my $history_head = readlink("$history_dir/head");
$history_head = int $history_head if $history_head;

my $history_tail = readlink("$history_dir/tail");
$history_tail = int $history_tail if $history_tail;

# prune history files outside the retention window
if(defined $history_head and defined $history_tail)
{
  while(ring_sub($history_head, $history_tail, 0xffff) > $::opts{retention})
  {
    uxunlink(sprintf("%s/%05u", $history_dir, $history_tail));
    $history_tail = ring_add($history_tail, 1, 0xffff);
  }
  symlinkf(sprintf("%05u", $history_tail), "$history_dir/tail");
}

my $quit = 0;
my $mining_market = '';
my $mining_miner = '';
my $mining_algo = '';
my $miner_pid = 0;
my $perf_pid = 0;
my $nicehash_aggregator_eu_pid = 0;
my $nicehash_aggregator_usa_pid = 0;

$SIG{CHLD} = sub {
  local ($!, $?);
  while((my $pid = waitpid(-1, WNOHANG)) > 0) {
    my $exit = $? >> 8;
    my $sig = $? & 127;
    if($pid == $miner_pid)
    {
      printf("CHLD miner-pid=$pid, status=$?, exit=$exit, signal=$sig\n");
      $miner_pid = 0;
    }
    elsif($pid == $perf_pid)
    {
      printf("CHLD perf-pid=$pid, status=$?, exit=$exit, signal=$sig\n");
      $perf_pid = 0;
    }
    elsif($pid == $nicehash_aggregator_eu_pid)
    {
      printf("CHLD nicehash-aggregator-eu-pid=$pid, status=$?, exit=$exit, signal=$sig\n");
      $nicehash_aggregator_eu_pid = 0;
    }
    elsif($pid == $nicehash_aggregator_usa_pid)
    {
      printf("CHLD nicehash-aggregator-usa-pid=$pid, status=$?, exit=$exit, signal=$sig\n");
      $nicehash_aggregator_usa_pid = 0;
    }
  }
};

$SIG{TERM} = $SIG{QUIT} = sub {
  $quit = 1;
};

# spawn market aggregators if they are not already running
for my $market ("usa", "eu")
{
  next unless $opts{"nicehash-$market"};

  my $pid;
  if(($pid = fork()) == 0)
  {
    my $holder = lock_obtain("/tmp/run/autominer/aggregator/nicehash-$market");
    if($holder)
    {
      print("nicehash-aggregator --region $market already running : $holder\n") if $verbose;
      exit;
    }

    chdir("/");
    POSIX::close(0);
    pr_set_pdeathsig(9);

    my @cmd = ("$repodir/bin/nicehash-aggregator", "--region", "$market");
    exec { $cmd[0] } @cmd;
  }

  $nicehash_aggregator_eu_pid = $pid if $market eq "eu";
  $nicehash_aggregator_usa_pid = $pid if $market eq "usa";
}

# pipes are named according to which process writes to it
my ($miner_reader_fd, $miner_writer_fd) = POSIX::pipe();
my ($perf_reader_fd, $perf_writer_fd) = POSIX::pipe();
my ($autominer_reader_fd, $autominer_writer_fd) = POSIX::pipe();

sub getrates
{
  my ($market, $window) = @_;

  my $path = "$opts{datadir}/rates/$market/$window";
  open(my $fh, "<$path") or die "open($path) : $!";
  my $text = do { local $/ = undef ; <$fh> };
  close $fh;

  decode_json($text);
}

my %rates;
while(!$quit)
{
  $rates{"nicehash-usa"} = getrates("nicehash-usa", $opts{window}) if $opts{"nicehash-usa"};
  $rates{"nicehash-eu"} = getrates("nicehash-eu", $opts{window}) if $opts{"nicehash-eu"};

  # evaluate mining options
  my @options;
  for my $market ("nicehash-usa", "nicehash-eu")
  {
    next unless $opts{$market};

    while(my($minername, $miner) = each %miners)
    {
      while(my($algoname, $algo) = each %{$$miner{algos}})
      {
        my $rate = $rates{$market}{$algoname};
        next unless $rates{$market}{$algoname};

        push @options, {
            miner => $miner
          , algo => $algo
          , market => $market
          , rate => $rates{$market}{$algoname}
          , profit => $$algo{speed} * $rates{$market}{$algoname}
        };
      }
    }
  }

  @options = sort { $$b{profit} <=> $$a{profit} } @options;
  my $option = $options[0];

  for my $option (@options)
  {
    my $profit = "(no data)";
    if($$option{algo}{speed} != 0xFFFFFFFF) {
      $profit = sprintf("%14.8f", $$option{profit});
    }

    printf "market %-15s miner %-20s algo %-20s rate %14.8f * speed %14.8f = profit %-10s\n"
      , $$option{market}
      , $$option{miner}{name}
      , $$option{algo}{name}
      , $$option{rate}
      , $$option{algo}{speed}
      , $profit
    ;
  }

  my $market = $$option{market};
  my $miner = $$option{miner};
  my $algo = $$option{algo};

  # open a new bench file to store the results of this run
  my $miner_bench_dir = "$opts{datadir}/bench/$opts{profile}/$$miner{name}";
  my $algo_bench_dir = "$miner_bench_dir/$$algo{name}";
  my $bench_file_num = ($$algo{head} || 0) + 1;
  my $bench_path = sprintf("%s/%05u", $algo_bench_dir, $bench_file_num);
  open(my $bench_fh, ">$bench_path") or die "open($bench_path) : $!";

  # the header line contains details about the selected option
  my $perf_header = sprintf("%-10s %12u %15s %30s %3s %14.8f * %14.8f = %14.8f\n\n"
    , $release::number
    , time()
    , $market
    , "$$miner{name}/$$algo{name}"
    , $opts{window}
    , $$algo{speed}
    , $$option{rate}
    , $$option{profit}
  );
  syswrite($bench_fh, $perf_header, length($perf_header));

  # advance the history files
  $history_head = 0 unless $history_head;
  $history_head = ring_add($history_head, 1, 0xffff);
  symlinkf($bench_path, sprintf("%s/%05u", $history_dir, $history_head));
  symlinkf(sprintf("%05u", $history_head), "$history_dir/head");

  if(not defined $history_tail)
  {
    $history_tail = $history_head;
    symlinkf(sprintf("%05u", $history_tail), "$history_dir/tail");
  }
  elsif(ring_sub($history_head, $history_tail, 0xffff) >= $::opts{retention})
  {
    uxunlink(sprintf("%s/%05u", $history_dir, $history_tail));
    $history_tail = ring_add($history_tail, 1, 0xffff);
    symlinkf(sprintf("%05u", $history_tail), "$history_dir/tail");
  }

  if(!$miner_pid || !$perf_pid || $market ne $mining_market || $$miner{name} ne $mining_miner || $$algo{name} ne $mining_algo)
  {
    miner_env_setup(market => $market, miner => $$miner{name}, algo => $$algo{name});

    # miner writes to autominer
    killfast([ \$miner_pid, \$perf_pid ]);
    $miner_pid = fork;
    if($miner_pid == 0)
    {
      POSIX::dup2($miner_writer_fd, 1);

      pr_set_pdeathsig(9);

      my @cmd = ($$miner{path}, "mine");
      exec { $cmd[0] } @cmd;
    }

    # perf reads from autominer via one pipe, and writes to autominer via a separate pipe
    $perf_pid = fork;
    if($perf_pid == 0)
    {
      POSIX::dup2($autominer_reader_fd, 0);
      POSIX::dup2($perf_writer_fd, 1);

      pr_set_pdeathsig(9);

      my @cmd = ($$miner{path}, "perf");
      exec { $cmd[0] } @cmd;
    }

    $mining_market = $market;
    $mining_miner = $$miner{name};
    $mining_algo = $$algo{name};
  }

  # read from the perf pipe until the period elapses
  perf_startfile($miner, $algo);

  my $T = time();
  my $buffer = '';
  my $data;
  my $s30;

  my $rin = '';
  vec($rin, $miner_reader_fd, 1) = 1;
  vec($rin, $perf_reader_fd, 1) = 1;
  while(1)
  {
    my $r = select(my $rout = $rin, undef, undef, 5);

    if(!$miner_pid || !$perf_pid)
    {
      print("miner or perf terminated early!");
      last;
    }

    next unless $r > 0;

    # read from miner, write to perf, tee to stdout
    if(vec($rout, $miner_reader_fd, 1) == 1)
    {
      my $r = POSIX::read($miner_reader_fd, $data, 0xffff);
      POSIX::write(1, $data, $r);
      POSIX::write($autominer_writer_fd, $data, $r);
    }

    # read from perf, write to /bench/foo
    if(vec($rout, $perf_reader_fd, 1) == 1)
    {
      my $r = POSIX::read($perf_reader_fd, $data, 0xffff);
      $buffer .= $data;

      $s30 = undef;

      # consume full lines
      while((my $nl = index($buffer, "\n")) >= 0)
      {
        my $line = substr($buffer, 0, $nl + 1, '');
        chomp $line;

        # get the most current rates
        $s30 = getrates($market, "s30") if not defined $s30;
        my $record = sprintf("%s %14.8f\n", $line, $$s30{$$algo{name}});
        syswrite($bench_fh, $record, length($record));

        perf_readline($miner, $algo, $line);
      }

      # minimize lost shares by switching right after reading a perf record
      last if (time() - $T) >= ($opts{period});
    }
  }

  close($bench_fh);
  perf_endfile($miner, $algo, $benchdir, $bench_file_num);
  perf_update($miner, $algo, $benchdir);
}

killfast([ \$miner_pid, \$perf_pid, \$nicehash_aggregator_eu_pid, \$nicehash_aggregator_usa_pid ]);
