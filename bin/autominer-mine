#!/usr/bin/env perl

# Copyright (c) 2017-2018 Todd Freed <todd.freed@gmail.com>
#
# This file is part of autominer.
#
# autominer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# autominer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License

use strict;
use warnings;

use Cwd;
use File::Basename;
our $repodir;
BEGIN { $repodir = dirname(Cwd::realpath("$0/..")) }
use lib "$repodir/lib";
override_warn_and_die();

use Data::Dumper;
use Errno;
use JSON::XS;
use POSIX ':sys_wait_h';
use Time::Piece;

use boost;
use child_commands;
use child_manager;
use config;
use history;
use logger;
use market;
use miner;
use option;
use perf;
use release;
use ring;
use util;
use xlinux;

our $verbose = 0;
our %opts = (
    'profile'                         => 'default'

  # minimal defaults
  , 'algo-trailing-window-seconds'    => 60 * 60        # one hour
  , 'algo-trailing-window-minimum'    => 60 * 5         # five minutes
  , 'switching-period'                => 60 * 6         # six minutes
  , 'switching-threshold'             => 0              # no threshold
  , 'history-retention-samples'       => 1680           # one week, at a six minute switching period

  # miner executables, search $PATH by default
  , 'ccminer-path'                    => 'ccminer'
  , 'ccminer-cryptonight-path'        => 'ccminer-cryptonight'
  , 'ethminer-path'                   => 'ethminer'
  , 'nheqminer-cuda-path'             => 'nheqminer_cuda'
  , 'sgminer-path'                    => 'sgminer'
  , 'eqm-path'                        => 'eqm'
);
my %optargs = (
    'help|h'                          => \$opts{help}
  , 'version|V'                       => \$opts{version}
  , 'verbose|v'                       => \$opts{verbose}

  # state
  , 'cache-dir=s'                     => \$opts{"cache-dir"}
  , 'history-dir=s'                   => \$opts{"history-dir"}
  , 'run-dir=s'                       => \$opts{"run-dir"}

  # basic setup
  , 'profile=s'                       => \$opts{profile}
  , 'worker=s'                        => \$opts{worker}
  , 'cards=s'                         => \$opts{cards}
  , 'history-retention-samples=i'     => \$opts{"history-retention-samples"}

  # algo benchmarking
  , 'algo-trailing-window-seconds=i'  => \$opts{"algo-trailing-window-seconds"}
  , 'algo-trailing-window-minimum=i'  => \$opts{"algo-trailing-window-minimum"}

  # selection
  , 'switching-threshold=i'           => \$opts{"switching-threshold"}
  , 'switching-period=i'              => \$opts{"switching-period"}

  # logging
  , 'show-boost!'                     => \$opts{"show-boost"}
  , 'show-boosts!'                    => \$opts{"show-boost"}
  , 'show-configuration!'             => \$opts{"show-configuration"}
  , 'show-hashrate!'                  => \$opts{"show-hashrate"}
  , 'show-miner-output!'              => \$opts{"show-miner-output"}
  , 'show-prediction!'                => \$opts{"show-prediction"}
  , 'show-selection!'                 => \$opts{"show-selection"}

  # boost
  , 'boost!'                          => \$opts{boost}
  , 'boosts!'                         => \$opts{boost}
  , 'use-boost!'                      => \$opts{boost}
  , 'use-boosts!'                     => \$opts{boost}
  , 'boost-trailing-window-seconds=i' => \$opts{"boost-trailing-window-seconds"}
  , 'boost-trailing-window-samples=i' => \$opts{"boost-trailing-window-samples"}
  , 'boost-trailing-window-pad=i'     => \$opts{"boost-trailing-window-pad"}

  # nicehash
  , 'nicehash-usa!'                   => \$opts{"nicehash-usa"}
  , 'nicehash-eu!'                    => \$opts{"nicehash-eu"}
  , 'nh-address=s'                    => \$opts{"nh-address"}
  , 'nh-switching-period=i'           => \$opts{"nh-switching-period"}
  , 'nh-price-method=s'               => \$opts{"nh-price-method"}
  , 'nh-trailing-sma-window=s'        => \$opts{"nh-trailing-sma-window"}

  # miningpoolhub
  , 'miningpoolhub!'                  => \$opts{"miningpoolhub"}
  , 'mph-username=s'                  => \$opts{"mph-username"}
  , 'mph-apikey=s'                    => \$opts{"mph-apikey"}
  , 'mph-switching-period=i'          => \$opts{"mph-switching-period"}
  , 'mph-round-duration-limit=i'      => \$opts{"mph-round-duration-limit"}

  # miner paths
  , 'ccminer-path=s'                  => \$opts{"ccminer-path"}
  , 'ccminer-cryptonight-path=s'      => \$opts{"ccminer-cryptonight-path"}
  , 'ethminer-path=s'                 => \$opts{"ethminer-path"}
  , 'nheqminer-cuda-path=s'           => \$opts{"nheqminer-cuda-path"}
  , 'sgminer-path=s'                  => \$opts{"sgminer-path"}
  , 'eqm-path=s'                      => \$opts{"eqm-path"}
);
configure(\%optargs, \%opts);

if($opts{help})
{
  print <<HELP;
autominer - an autoswitching miner for linux, version $release::number

 >> BTC donations : 184AtMD3AihYke2bKQD9AXh4Dgzvtr7jhA (hossbeast)

usage: autominer mine [options]

 --help         print this help text
 --version      print the version number, exit
 --verbose      print commands as they are run

required
 --cache-dir <path>     base directory for aggregated market and mining data
 --history-dir <path>   base directory for mining history
 --run-dir <path>       base directory for process lockfiles
 --cards <device-ids>   comma-separated list of devices ids to mine with

basic setup
 --profile <name>             separate config file and history
 --worker <name>              name of this mining rig
 --history-retention-samples  number of mining intervals to retain history for

algo benchmarking
 --algo-trailing-window-seconds   duration of algo history to use for estimating hashrate [default: 3 hours]
 --algo-trailing-window-minimum   minimum required length of algo history to estimate hashrate [default: 5 minutes]

selection
 --switching-period <seconds>   how frequently to re-evaluate what option to mine [default: 6 minutes]
 --switching-threshold <pct>    only switch if the predicted profit difference meets or exceeds this threshold [default: 0]

boosting
 --boost                          enable boosting [default: false]
 --boost-trailing-window-seconds  discard samples older than <seconds>
 --boost-trailing-window-samples  discard all but the most recent N samples
 --boost-trailing-window-pad      in samples

nicehash
 --nicehash-usa                   consider mining algos on nicehash.usa
 --nicehash-eu                    consider mining algos on nicehash.eu
 --nh-address <address>           nicehash address - where to send rewards
 --nh-price-method opportunity    predict nicehash profits using the opportunity price
 --nh-price-method trailing-sma   predict nicehash profits using the use trailing average price paid
 --nh-trailing-sma-window         for trailing-sma, price window to use, one of s30|m1|m5|m10|h1|h3
 --nh-switching-period            override the global switching period for nh selections

miningpoolhub
 --mph                                consider mining pools on miningpoolhub
 --mph-username <string>              mph username
 --mph-apikey <string>                apikey for your miningpoolhub account
 --mph-switching-period <seconds>     override the global switching period for mph selections
 --mph-round-duration-limit <seconds> ignore pools which last mined a block more than <seconds> ago

miners
 --ccminer-path <path>              path to the ccminer executable
 --ccminer-cryptonight-path <path>  path to the ccminer-cryptonight executable
 --ethminer-path <path>             path to the ethminer executable
 --nheqminer-cuda-path <path>       path to the nheqminer_cuda executable
 --sgminer-path <path>              path to the sgminer executable
 --eqm-path <path>                  path to the eqm executable

logging
 --show-boost           log changes to boost factors
 --show-configuration   log parsing of configuration options
 --show-hashrate        log changes to algo hashrates
 --show-miner-output    tee miner stdout to stdout
 --show-selection       show a table of mining options and predicted profit for each
 --show-prediction      for the selected option, show profit prediction details

For more information visit https://github.com/hossbeast/autominer
HELP
  exit 0
}
if($opts{version})
{
  print "autominer-$release::number\n";
  exit 0;
}

die "missing required config --run-dir" unless $opts{"run-dir"};
die "missing required config --cache-dir" unless $opts{"cache-dir"};
die "missing required config --history-dir" unless $opts{"history-dir"};
die "missing required config --cards" unless defined $opts{"comma-cards"};
die "missing required config --history-retention-samples" unless $opts{"history-retention-samples"};
if($opts{"nicehash-eu"} || $opts{"nicehash-eu"})
{
  die "missing required config --nh-address" unless $opts{"nh-address"};
  die "missing required config --nh-price-method" unless $opts{"nh-price-method"};
  if($opts{"nh-price-method"} eq "trailing-sma")
  {
    die "missing required config --nh-trailing-sma-window" unless $opts{"nh-trailing-sma-window"};
  }
}
if($opts{"miningpoolhub"})
{
  die "missing required config --mph-username" unless $opts{"mph-username"};
  die "missing required config --mph-apikey" unless $opts{"mph-apikey"};
  die "missing required config --worker" unless $opts{worker};
}
if($opts{"boost"})
{
  die "missing required config --boost-trailing-window-samples" unless defined $opts{"boost-trailing-window-samples"};
  die "missing required config --boost-trailing-window-seconds" unless defined $opts{"boost-trailing-window-seconds"};
}

# ensure state directories exist
mkdirp($opts{"cache-dir"});
mkdirp($opts{"history-dir"});
mkdirp($opts{"run-dir"} . "/autominer-aggregator");

# delegate SIG{CHLD}
child_manager_configure();

# configure miners
my @miners = miners_load("$repodir/miners", $opts{"history-dir"}, %opts);
die "no miners" unless @miners;

# configure markets
my @markets = markets_load(%opts);
die "no markets" unless @markets;

# intialize boosts
boost_configure(%opts);

# mining choices and performance are recorded as separate history streams
# streams pushed here are persistent
my $history = history::new($opts{"history-dir"}, $opts{"history-retention-samples"}, $opts{profile});
if($opts{worker})
{
  $history->push("worker" => $opts{worker});
}
$history->mark();

# per coin market and mining stats
my $coinstats;

# program state
my $quit = 0;
$SIG{TERM} = $SIG{QUIT} = sub {
  $quit = 1;
};

sub load_coinstats
{
  my $path = sprintf("%s/coinstats/%s", $opts{"cache-dir"}, "present");
  open(my $fh, "<$path") or die "open($path) : $!";
  my $text = do { local $/ = undef ; <$fh> };
  close $fh;
  $coinstats = decode_json($text);
}

# spawn aggregators if they are not already running
for my $agg_args (["nh", "--region", "usa"], ["nh", "--region", "eu"], ["coinstats"], ["mph"])
{
  my $source = shift @$agg_args;
  my @args = @$agg_args;
  my $aggregator_name = $source;
  $aggregator_name .= "-$args[1]" if $source eq "nh";

  # run market aggregators on demand, always run coinstats aggregator
  if($source eq "nh" || $source eq "mph")
  {
    my $param;
    $param = "nicehash-$args[1]" if $source eq "nh";
    $param = "miningpoolhub" if $source eq "mph";
    next unless $opts{$param};
  }

  my $pid;
  if(($pid = fork()) == 0)
  {
    my @cmd = (
        "$repodir/bin/autominer-$source-aggregator"
      , @args
    );

    my $locksdir = $opts{"run-dir"} . "/autominer-aggregator";
    my $holder = lock_obtain("$locksdir/$aggregator_name");
    if($holder)
    {
      print STDERR ("@cmd already running : $holder\n") if $verbose;
      exit;
    }

    chdir("/");
    POSIX::close(0);
    pr_set_pdeathsig(9);

    exec { $cmd[0] } @cmd;
  }

  putchild("$aggregator_name-aggregator", $pid);
}

# pipes are named according to which process writes to it
my ($miner_reader_fd, $miner_writer_fd) = POSIX::pipe();
my ($perf_reader_fd, $perf_writer_fd) = POSIX::pipe();
my ($autominer_reader_fd, $autominer_writer_fd) = POSIX::pipe();

if($verbose)
{
  print("miner-reader $miner_reader_fd miner-writer $miner_writer_fd\n");
  print("perf-reader $perf_reader_fd perf-writer $perf_writer_fd\n");
  print("autominer-reader $autominer_reader_fd autominer-writer $autominer_writer_fd\n");
}

# option currently being mined, if any
my $current_option;
my $perf_time_base;
while(!$quit)
{
  # re-load market stats
  load_coinstats();
  for my $market (@markets)
  {
    $market->load_rates($coinstats);
  }

  # option to mine during this round
  my $option;

  # gather mining options, sort by predicted profit
  my $next_current_option;
  my @options;
  for my $market (@markets)
  {
    for my $candidate ($market->assemble_mining_options(\@miners))
    {
      if($current_option && option_cmp($candidate, $current_option) == 0)
      {
        $candidate = $next_current_option = $current_option;
      }

      $market->evaluate_option($candidate);
      push @options, $candidate;
    }
  }

  $current_option = $next_current_option;

  @options = sort {
       $$a{algo}{hashrate_duration} < $opts{"algo-trailing-window-minimum"} ? -1 : 0
    || $$b{algo}{hashrate_duration} < $opts{"algo-trailing-window-minimum"} ? 1 : 0
    || $$b{predicted_profit} <=> $$a{predicted_profit}
  } @options;

  # select the best option in order of descending profit
  for my $candidate (@options)
  {
    if($option) { }
    elsif($$candidate{algo}{hashrate_duration} < $opts{"algo-trailing-window-minimum"})
    {
      $option = $candidate;
    }
    elsif(!$current_option || $$candidate{current})
    {
      $option = $candidate;
    }
    else
    {
      my $variance = variance($$current_option{predicted_profit}, $$candidate{predicted_profit});
      if(($variance * 100) >= $opts{"switching-threshold"})
      {
        $option = $candidate;
      }
    }

    # print details about the selection
    if($opts{"show-selection"})
    {
      my $profit = "(insufficient benchmark data, less than " . durationstring($opts{"algo-trailing-window-minimum"}) . ")";
      if($$candidate{algo}{hashrate_duration} >= $opts{"algo-trailing-window-minimum"}) {
        $profit = sprintf("%14.8f", $$candidate{predicted_profit});
      }

      printf("%-15s", $$candidate{market}{name});
      printf(" %-20s", $$candidate{pool}{name});
      printf(" %-20s", $$candidate{miner}{name});
      printf(" %-20s", $$candidate{algo}{name});
      printf(" predicted profit %-14s", $profit);
      printf(" boost %7.2f", $$candidate{boost}{modifier});

      if($$candidate{current})
      {
        print(" <<<"); # previous option
      }
      else
      {
        print("   ");
      }

      # just-selected option
      if($option && $candidate == $option)
      {
        print(" <<=")
      }

      print("\n");
    }
  }

  if(!$$option{current} || $opts{"show-prediction"})
  {
    logf("%-60s predicted %-14.8f %6s %14s %8s %7s boost %7.2f <<=="
      , sprintf("%s/%s/%s/%s"
          , $$option{market}{name}
          , $$option{pool}{name}
          , $$option{miner}{name}
          , $$option{algo}{name}
        )
      , $$option{predicted_profit}
      , "", "", "", ""
      , $$option{boost}{modifier}
    );

    if($opts{"show-prediction"})
    {
      $$option{market}->show_prediction($option);
    }
  }

  if(!$$option{current} || !$children_by_name{miner} || !$children_by_name{perf})
  {
    killchildren("miner", "perf");

    miner_env_setup($$option{miner}{name}, $option);

    # miner writes to autominer
    my $miner_pid = fork;
    if($miner_pid == 0)
    {
      POSIX::dup2($miner_writer_fd, 1) or die("dup2($miner_writer_fd, 1) : $!");

      pr_set_pdeathsig(9) or die("pr_set_pdeathsig(9) : $!");

      my @cmd = ($$option{miner}{path}, "mine");
      exec { $cmd[0] } @cmd;
    }
    putchild("miner", $miner_pid);

    # perf reads from autominer via one pipe, and writes to autominer via a separate pipe
    my $perf_pid = fork;
    if($perf_pid == 0)
    {
      POSIX::dup2($autominer_reader_fd, 0) or die("dup2($autominer_reader_fd, 0) : $!");
      POSIX::dup2($perf_writer_fd, 1) or die("dup2($perf_writer_fd, 1) : $!");

      pr_set_pdeathsig(9) or die("pr_set_pdeathsig(9) : $!");

      my @cmd = ($$option{miner}{path}, "perf");
      exec { $cmd[0] } @cmd;
    }
    putchild("perf", $perf_pid);

    # reset option state
    $option->reset();
    $perf_time_base = 0;
  }

  $$option{current} = 1;
  $current_option = $option;

  # reset per-period option state
  $option->start();

  my $switching_period = $$option{market}->switching_period() || $opts{"switching-period"};
  my $results = { profit => 0 };
  OPTION: while((time() - $$option{start}) < $switching_period)
  {
    my $interval = $$option{market}->get_mining_interval($option);
    $interval = $switching_period unless $interval;

    my $buffer = '';
    my $data;

    my $rin = '';
    vec($rin, $miner_reader_fd, 1) = 1;
    vec($rin, $perf_reader_fd, 1) = 1;
    my $iteration_start = time();
    while(1)
    {
      my $r = select(my $rout = $rin, undef, undef, 5);

      if(!$children_by_name{miner} || !$children_by_name{perf})
      {
        logf("miner or perf terminated unexpectedly!");
        last OPTION;
      }

      if($r <= 0)
      {
        # this happens if the perf process never emits a perf record
        last if (time() - $iteration_start) > $interval;
      }

      next unless $r > 0;

      # read from miner, write to perf, (optionally) tee to stdout
      if(vec($rout, $miner_reader_fd, 1) == 1)
      {
        if(($r = aread($miner_reader_fd, $data, 0xffff)))
        {
          awrite(1, $data, $r) if $opts{"show-miner-output"};
          awrite($autominer_writer_fd, $data, $r);
        }
      }

      # read from perf
      if(vec($rout, $perf_reader_fd, 1) == 1)
      {
        if(($r = aread($perf_reader_fd, $data, 0xffff)))
        {
          $buffer .= $data;

          # consume full lines
          while((my $nl = index($buffer, "\n")) >= 0)
          {
            my $line = substr($buffer, 0, $nl + 1, '');
            my @hashrate_records = perf_readline(\$perf_time_base, $line);
            $option->hashrate_sample(@hashrate_records);
          }

          # minimize lost shares by switching right after reading a perf record
          last if (time() - $iteration_start) > $interval;
        }
      }
    }

    # get results for the interval just elapsed
    my $interval_results = $$option{market}->get_mining_results($option, $coinstats);
    $$option{market}->accumulate_mining_results($results, $interval_results);
  }

  $option->end($results);
  $$option{hashrate} ||= 0;
  $$option{algo}->sample($$option{duration}, $$option{hashrate});
  $$option{algo}->report() if $opts{"show-hashrate"};

  $history->rewind();
  $history->push(miner => $$option{miner}{name});
  $history->push(market => $$option{market}{name});
  $history->push(algo => $$option{algo}{name}, miner => $$option{miner}{name});
  $history->push(market => $$option{market}{name}, pool => $$option{pool}{name});
  $history->push("nh-address" => $opts{"nh-address"}) if substr($$option{market}{name}, 8) eq "nicehash";
  $history->push("mph-username" => $opts{"mph-username"}) if $$option{market}{name} eq "miningpoolhub";

  my $text = $option->record();
  $history->write($text);

  my $variance_noboost = variance2($$option{predicted_profit_noboost}, $$option{actual_profit});
  $$option{boost}->sample($$option{start}, $variance_noboost);
  $$option{boost}->report() if $opts{"show-boost"};

  my $variance = variance2($$option{predicted_profit}, $$option{actual_profit});
  logf("%-60s predicted %-14.8f profit %-14.8f variance %-7.2f boost %7.2f"
    , sprintf("%s/%s/%s/%s"
        , $$option{market}{name}
        , $$option{pool}{name}
        , $$option{miner}{name}
        , $$option{algo}{name}
      )
    , $$option{predicted_profit}
    , $$option{actual_profit}
    , $variance
    , $$option{boost}{modifier}
  );
}

killchildren()
